import sys
import bio # codon (seq) library
from collections import Counter
from utils import *

## Install
#CODON
#/bin/bash -c "$(curl -fsSL https://exaloop.io/install.sh)"
#SEQ (assuming Codon is in $HOME/.codon)
#curl -L https://github.com/exaloop/seq/releases/download/v0.11.3/seq-$(uname -s | awk '{print tolower($0)}')-$(uname -m).tar.gz | tar zxvf - -C .codon/lib/codon/plugins

## Run script like this:
# codon run -plugin seq -release -D BC_LEN=16 -D BC_START=29 -D MIN_READS_IN_BC=200 01_divmux.codon <Path_I2_gzipped_or_not> <Path_R1_unzipped> <Path_R2_unzipped> <Path_whitelist_modBC> <Path_whitelist_scBC> <Path_output_stats.tsv> <Path_reads_per_barcode_stats.tsv> <sam_header.txt> <Hamming_distance_allowed_MOD> <Hamming_distance_allowed_SC>
# e.g.:
# codon run -plugin seq -release -D BC_LEN=16 -D BC_START=29 -D MIN_READS_IN_BC=20 01_divmux.codon I2.fq R1.fq R2.fq whitelistMod.txt whitelist.txt demux_stats.tsv reads_per_barcode.tsv sam_header.txt 2 1

## Default values
# BC_LEN and BC_START MIN_READS_IN_BC need to be passed when invoking codon: 
# "codon run -plugin seq -release -D BC_LEN=16 -D BC_START=29 -D MIN_READS_IN_BC=200 divmux.codon ..."

# Minimum percentage of barcodes that should be found before returning with an error.
min_frac_bcs_to_find_default = 0.5

# By default we reverse-complement the BC read (I2)
# If we find less than 50% matching bcs then we reperform
# the correction with rev_comp set to False
rev_comp = True

## Functions
def read_barcode_whitelist_from_file(
    bc_whitelist_filename: str,
    bc_length_i: Static[int]
):
    """
    Read whitelisted barcodes from file and convert to a set of Kmers.
    Parameters
    ----------
    bc_whitelist_filename
        Filename with whitelisted barcodes.
    bc_length_i
        Length of barcode.
    Returns
    -------
    Set with barcodes as Kmers.
    """
    sys.stdout.write(f"Importing whitelist: {bc_whitelist_filename}\n")
    bc_whitelist = set()
    with open(bc_whitelist_filename, "r") as fh:
        [bc_whitelist.add(Kmer[bc_length_i](seq(bc_line.strip()))) for bc_line in fh]
    return bc_whitelist


def correct_barcodes_from_fastq(
    R1:str,
    I2:str,
    R2:str,
    start_pos_bc: Static[int],
    bc_length_i: Static[int],
    nanoCT_singlecell_bc_whitelist: set[Kmer[BC_LEN]],
    corrected_bc_stats_tsv_filename: str,
    reads_per_barcode_tsv_filename: str,
    SAM_header_filename: str,    
    max_hamming_dist: int,
    rev_comp: bool
) -> float:
    """
    Read nanoCT artifical BC FASTQ with 16bp cell barcode
    Add corrected BCs to R1 R2 FASTQs

    Parameters
    ----------
    nanoCT_singlecell_bc_whitelist:
        File with 16bp cell barcode whitelist
    R1 & R2:
        Input FASTQ files with normal reads
    I2:
        Input FASTQ.GZ file with raw barcode reads, made from:
          - 16bp cell barcode 29-45
          (- 8bp modality barcode 0-8)
    corrected_bc_stats_tsv_filename:
        File with barcode correction statistics.
    max_hamming_dist:
        Maximum hamming distance allowed for the barcode to consider it a match with
        the whitelist. Default: 1.
    rev_comp:
        Whether to take the Reverse Complement of the BC in I2 before checking the WL.

    Returns
    -------
    frac_bcs_found

    """
    
    # Initialize barcode FASTQ reader
    if I2.endswith('.gz'):
        I2_line = bio.FASTQ(I2, gzip=True, validate=False, copy=True)
    else:
        I2_line = bio.FASTQ(I2, gzip=False, validate=False, copy=True)
    
    # Initialize barcode and stats lists
    corr_bcs = List[str](capacity=500000000)
    # Store number of reads which have hamming distance of 0, 1, 2 or 3 from barcodes whitelist.
    bc_mismatches_stats = [0, 0, 0, 0]
    n_bcs = 0
    
    sys.stdout.write(f"Correcting barcodes from {I2}\n")
    try:
        while True:
            record = next(I2_line)
            n_bcs += 1
            if n_bcs % 10000 == 0:
                sys.stdout.write(f"\rProcessed {n_bcs} barcodes...")
                sys.stdout.flush()
            # Get barcode sequence and associated quality from FASTQ record
            if rev_comp:
                # reverse complemented
                bc_seq, bc_qual = ((~(record.seq[start_pos_bc:start_pos_bc+bc_length_i]), record.qual[start_pos_bc:start_pos_bc+bc_length_i][::-1]))
            else:
                # Forward
                bc_seq, bc_qual = (record.seq[start_pos_bc:start_pos_bc+bc_length_i], record.qual[start_pos_bc:start_pos_bc+bc_length_i])
                        
            corrected_bc = correct_bc_by_qual_order_with_whitelist_or_correct_bc_with_Ns_with_whitelist(
            bc_whitelist=nanoCT_singlecell_bc_whitelist,
            bc_length_e=bc_length_i,
            bc_seq=bc_seq,
            bc_qual=bc_qual,
            max_hamming_dist=max_hamming_dist,
            )
            
            if corrected_bc:
                bc_mismatches_stats[corrected_bc.hamming_dist] += 1
                corr_bcs.append(corrected_bc.corrected_bc)
            else:
                corr_bcs.append('NoMatch')
                
    except StopIteration:
        sys.stdout.write("\r")
        sys.stdout.flush()
        sys.stdout.write(f"Finished processing {n_bcs} barcodes...\n")
        
        BC_Counter = Counter(corr_bcs)
        n_nomatch = BC_Counter.pop('NoMatch')
        passing_BCs_indices = set([index for index, item in enumerate(corr_bcs) if BC_Counter[item] >= MIN_READS_IN_BC])
        passing_BCs = [item for item in BC_Counter if BC_Counter[item] >= MIN_READS_IN_BC]
        
        # Initialize reads FASTQ readers
        if R1.endswith('.gz'):
            R1_line = bio.FASTQ(R1, gzip=True, validate=False, copy=True)
            R1parts = R1.split('.')
            R1_corr = '.'.join(R1parts[:-2]) + '_correct' + '.' + R1parts[-2]
        else:
            R1_line = bio.FASTQ(R1, gzip=False, validate=False, copy=True)
            R1parts = R1.split('.')
            R1_corr = '.'.join(R1parts[:-1]) + '_correct' + '.' + R1parts[-1]
        if R2.endswith('.gz'):
            R2_line = bio.FASTQ(R2, gzip=True, validate=False, copy=True)
            R2parts = R2.split('.')
            R2_corr = '.'.join(R2parts[:-2]) + '_correct' + '.' + R2parts[-2]
        else:
            R2_line = bio.FASTQ(R2, gzip=False, validate=False, copy=True)
            R2parts = R2.split('.')
            R2_corr = '.'.join(R2parts[:-1]) + '_correct' + '.' + R2parts[-1]
            
        # Initialize FASTQ writers and counters
        R1_corr_fh = open(R1_corr, 'w')
        R2_corr_fh = open(R2_corr, 'w')
        n_reads = 0
        n_passing_reads = 0
        
        sys.stdout.write(f"Demultiplexing reads...\n")
        try:
            while True:
                recordR1 = next(R1_line)
                recordR2 = next(R2_line)
                
                if n_reads in passing_BCs_indices:
                    n_passing_reads += 1
                    record_name_tagged = recordR1.name + f' RG:Z:{corr_bcs[n_reads]}'
                    if n_passing_reads == 1:
                        R1_corr_fh.write(f'@{record_name_tagged}\n{recordR1.read}\n+\n{recordR1.qual}')
                        R2_corr_fh.write(f'@{record_name_tagged}\n{recordR2.read}\n+\n{recordR2.qual}')
                    else:
                        R1_corr_fh.write(f'\n@{record_name_tagged}\n{recordR1.read}\n+\n{recordR1.qual}')
                        R2_corr_fh.write(f'\n@{record_name_tagged}\n{recordR2.read}\n+\n{recordR2.qual}')
                
                n_reads += 1
                if n_reads % 10000 == 0:
                    sys.stdout.write(f"\rProcessed {n_reads} reads...") 
                    sys.stdout.flush()     
                
        except StopIteration:
            sys.stdout.write("\r")
            sys.stdout.flush()
            sys.stdout.write(f"Finished processing {n_reads} reads...\n")
            
            # Close the corrected read files
            R1_corr_fh.close()
            R2_corr_fh.close()
            
            assert n_reads == n_bcs, f"Number of reads in I2 ({n_bcs}) and R1/R2 ({n_reads}) do not match."

            sys.stdout.write("Writing stats, log files and SAM header\n\n")
            # Calculate number of reads with/without a barcode.
            bc_reads = sum(bc_mismatches_stats) # bcs not found are not there
            reads_without_bc = n_reads - bc_reads
            # Calculate fraction of barcodes found in all reads.
            frac_bcs_found = bc_reads / n_reads
            # Reads in barcode with less than required amount of reads
            reads_in_too_small_bc = bc_reads - n_passing_reads
            
            # Initialize an empty string variable to store the stats
            stats_tsv = ""
            # Append the stats
            stats_tsv += (
                f"reads\t{n_reads}\t100.00%\n" +
                f"bc_reads\t{bc_reads}\t" + f"{(bc_reads / n_reads * 100.0)}%\n" +
                f"reads_without_bc\t{reads_without_bc}\t" + f"{(reads_without_bc / n_reads * 100.0)}%\n"
            )
            for i in range(0, max_hamming_dist + 1):
                stats_tsv += (
                    f"bc_reads_with_{i}_mismatches\t{bc_mismatches_stats[i]}\t" +
                    f"{(bc_mismatches_stats[i] / n_reads * 100.0)}%\n"
                )
            stats_tsv += (
                f"bc_reads\t{bc_reads}\t" + f"{(bc_reads / n_reads * 100.0)}%\n" +
                f"bc_reads_in_cells\t{n_passing_reads}\t" + f"{(n_passing_reads / bc_reads * 100.0)}%\n" +
                f"bc_reads_in_too_small_bc\t{reads_in_too_small_bc}\t" + f"{(reads_in_too_small_bc / bc_reads * 100.0)}%\n"
                f"overall_passing_reads(valid_bc_and_cell)\t{n_passing_reads}\t" + f"{(n_passing_reads / n_reads * 100.0)}%\n"        
            )
            
            #Writing log files and sam header
            # write the stats to corrected_bc_stats_tsv_filename
            with open(corrected_bc_stats_tsv_filename, 'w') as file:
                file.write(stats_tsv)
            # write the reads_per_barcode to reads_per_barcode_tsv_filename
            with open(reads_per_barcode_tsv_filename, "w") as file:
                # Write item counts as tab-separated values
                for bc, read_count in BC_Counter.items():
                    file.write(f"{read_count}\t{bc}\n")
                file.write(f"{n_nomatch}\tNoMatch")
            # Write passing_BC as RG header lines
            with open(SAM_header_filename, "w") as file:
                i = 0
                for passing_BC in passing_BCs:
                    if i == 0:
                        file.write(f"@RG\tID:{passing_BC}")
                    else:
                        file.write(f"\n@RG\tID:{passing_BC}")
                    i += 1
            
            # print the stats to the console
            sys.stdout.write(f'\n{stats_tsv}\n')

            return frac_bcs_found
        

def main():
    # Check that the correct number of arguments are passed
    if not (isinstance(BC_LEN, int) and isinstance(BC_START, int) and isinstance(MIN_READS_IN_BC, int) and len(sys.argv) == 11):
        sys.stderr.write(
            f"Wrong call, exiting...\nUsage: codon run -plugin seq -release -D BC_LEN=<bc_length> -D BC_START=<start_pos_bc> -D MIN_READS_IN_BC=<min_reads_in_cells> {sys.argv[0]} I2.fastq.gz R1.fastq R2.fastq whitelist.txt whitelistMod.txt stats.tsv read_per_barcode.tsv sam_header.txt <Hamming_distance_allowed_MOD> <Hamming_distance_allowed_SC>\n\n")
        sys.exit(1)
    else:
        I2 = sys.argv[1]
        R1 = sys.argv[2]
        R2 = sys.argv[3]
        nanoCT_mod_bc_whitelist_filename = sys.argv[4]
        nanoCT_singlecell_bc_whitelist_filename = sys.argv[5]
        corrected_bc_stats_tsv_filename = sys.argv[6]
        reads_per_barcode_tsv_filename = sys.argv[7]
        SAM_header_filename = sys.argv[8]
        max_mismatches_mod = int(sys.argv[9])
        max_mismatches_sc = int(sys.argv[10])
    # Check that the max_mismatches is 0, 1, 2 or 3
    if max_mismatches_mod not in [0,1,2,3] or max_mismatches_sc not in [0,1,2,3]:
        sys.stderr.write(f"\nExiting...\nHamming Distances must be 0, 1, 2 or 3\n")
        sys.exit(1)

    # Read cell barcodes from file and convert to a set of Kmers.
    nanoCT_singlecell_bc_whitelist = read_barcode_whitelist_from_file(
        bc_whitelist_filename=nanoCT_singlecell_bc_whitelist_filename,
        bc_length_i=BC_LEN)
    
    # Read cell barcodes from file and convert to a set of Kmers.
    nanoCT_mod_bc_whitelist = read_barcode_whitelist_from_file(
        bc_whitelist_filename=nanoCT_mod_bc_whitelist_filename,
        bc_length_i=BC_LEN)

    # Read FASTQ with barcodes and write R1 R2 FASTQs with corrected barcodes in CB comment for barcodes
    # that match the whitelist closely enough, else only write the original barcodes in CR.
    # Output the fraction of reads that have a barcode
    frac_bcs_found_rev = correct_barcodes_from_fastq(
        R1 = R1,
        I2 = I2,
        R2 = R2,
        start_pos_bc=BC_START,
        bc_length_i=BC_LEN,
        nanoCT_singlecell_bc_whitelist=nanoCT_singlecell_bc_whitelist,
        corrected_bc_stats_tsv_filename=corrected_bc_stats_tsv_filename,
        reads_per_barcode_tsv_filename=reads_per_barcode_tsv_filename,
        SAM_header_filename=SAM_header_filename,
        max_hamming_dist=max_mismatches,
        rev_comp=rev_comp)
    
    # If we find less than 50% matching bcs then we reperform
    # the correction with rev_comp set to False
    # and check again if we find more than 50% matching bcs
    # If not we exit with an error
    if frac_bcs_found_rev < min_frac_bcs_to_find_default:
        sys.stdout.write(f"Warning: Only {frac_bcs_found_rev * 100.00}% of the reads have a valid barcode.\n \
    Barcode correction will be reperformed with I2 as Forward instead of Reverse.\n")
        frac_bcs_found_for = correct_barcodes_from_fastq(
            R1 = R1,
            I2 = I2,
            R2 = R2,
            start_pos_bc=BC_START,
            bc_length_i=BC_LEN,
            nanoCT_singlecell_bc_whitelist=nanoCT_singlecell_bc_whitelist,
            corrected_bc_stats_tsv_filename=corrected_bc_stats_tsv_filename,
            reads_per_barcode_tsv_filename=reads_per_barcode_tsv_filename,
            SAM_header_filename=SAM_header_filename,
            max_hamming_dist=max_mismatches,
            rev_comp=not rev_comp)
        
        if frac_bcs_found_for < min_frac_bcs_to_find_default:
            sys.stderr.write(f"Warning: Only {frac_bcs_found_for * 100.00}% of the reads have a valid barcode (Forward mode).\n \
                                        Only {frac_bcs_found_rev * 100.00}% of the reads have a valid barcode (Reverse mode).\n \
                Check if you provided the correct barcode whitelist file.\n")
            sys.exit(1)
        else:
            sys.stdout.write(f"{frac_bcs_found_for * 100.00}% of the reads (Forward mode) had a valid barcode.\n")
    else:
        sys.stdout.write(f"{frac_bcs_found_rev * 100.00}% of the reads (Reverse mode) had a valid barcode.\n")

if __name__ == "__main__":
    main()